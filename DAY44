# QUESTION 70:- Container With Most Water
# DESCRIPTION:- You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.

# EXAMPLE1:-
  Input: height = [1,8,6,2,5,4,8,3,7]
  Output: 49
  Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

# EXAMPLE2:-  
  Input: height = [1,1]
  Output: 1    

# SOLUTION 70:- 
class Solution {
public:
    int maxArea(vector<int>& height) {
        int left = 0;
        int right = height.size()-1;

        int maxi = INT_MIN;
        while(left < right){
            int width = right-left;
            int ans =  min(height[left],height[right])*width;
            maxi = max(maxi , ans);
            if(height[left] < height[right]){
                left++;
            }else right--;
        }

        return maxi;
    }
};



# QUESTION 71:- The Celebrity Problem
# DESCRIPTION:- A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. Here M[i][i] will always be 0.
Note: Follow 0 based indexing.
Follow Up: Can you optimize it to O(N)
 
# EXAMPLE1:-
  Input:
  N = 3
  M[][] = {{0 1 0},
           {0 0 0}, 
           {0 1 0}}
  Output: 1
  Explanation: 0th and 2nd person both
  know 1. Therefore, 1 is the celebrity. 

# EXAMPLE2:-  
  Input:
  N = 2
  M[][] = {{0 1},
           {1 0}}
  Output: -1
  Explanation: The two people at the party both
  know each other. None of them is a celebrity.

# SOLUTION 71:- 
class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        stack<int> stack;
        for(int i = 0; i < n; i++){
            stack.push(i);
        }
        
        
        while(stack.size() > 1){
            int a = stack.top();
            stack.pop();                       //2  1
            
            int b = stack.top();
            stack.pop();                       //1  0
            
            if(M[a][b] == 1){
                stack.push(b);
            }else stack.push(a);
        }
            
        int ans = stack.top();
        int zeroCount = 0;
        int oneCount = 0;
        for(int i = 0 ; i < M[0].size(); i++){
                if(M[ans][i] == 0){
                    zeroCount++;
                }
                
                if(M[i][ans] == 1){
                    oneCount++;
                }
            }
            
        if(zeroCount == M.size() && oneCount == M.size()-1){
                return ans;
        }
        else{
            return -1;
            }
        return -1;
        
    }

# QUESTION 40:- Valid Number
# DESCRIPTION:- A valid number can be split up into these components (in order):
A decimal number or an integer.
(Optional) An 'e' or 'E', followed by an integer.
A decimal number can be split up into these components (in order):
(Optional) A sign character (either '+' or '-').
One of the following formats:
One or more digits, followed by a dot '.'.
One or more digits, followed by a dot '.', followed by one or more digits.
A dot '.', followed by one or more digits.
An integer can be split up into these components (in order):
(Optional) A sign character (either '+' or '-').
One or more digits.
For example, all the following are valid numbers: ["2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90E3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"], while the following are not valid numbers: ["abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"].
Given a string s, return true if s is a valid number.

# EXAMPLE1:-
  Input: s = "0"
  Output: true

# EXAMPLE2:-
  Input: s = "e"
  Output: false

# SOLUTION 40:- 
class Solution {
public:
    bool isNumber(string s) {
        int size = s.size() ;
        bool integer = false;
        bool decimal = false;

        int i = 0;
        if(s[i] == '-' || s[i] == '+')
            i++; 

        while(i < size && isdigit(s[i])){
            integer = true;
            i++;
        }

        if(i < size && s[i] == '.'){
            i++;
            while(i < size && isdigit(s[i])){
                decimal = true;
                i++;
            }
        }

        if(i < size && s[i] == 'e' || s[i] == 'E'){
            i++;
            if(i < size && s[i] == '+' || s[i] == '-'){
                i++;
            }

            if(i == s.size() || !isdigit(s[i])){
                return false;
            }

            while(i < size && isdigit(s[i])){
                i++;
            }
        }

        return i == s.size() && (integer||decimal);
    }
};

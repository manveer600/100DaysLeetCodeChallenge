# QUESTION 117:- Cousins in Binary Tree
# DESCRIPTION:- Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.
Two nodes of a binary tree are cousins if they have the same depth with different parents.
Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.

# EXAMPLE1:
  Input: root = [1,2,3,4], x = 4, y = 3
  Output: false

# Example 2:
  Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
  Output: true
 
# SOLUTION 117:- 
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        TreeNode* parent1 = NULL;
        TreeNode* parent2 = NULL;

        queue<TreeNode*>q;
        q.push(root);

        while(!q.empty()){
            int size = q.size();

            while(size-- > 0){
                TreeNode* front = q.front();
                q.pop();
                if(front -> left){
                    if(front -> left -> val == x){
                        parent1 = front;
                    }

                    if(front -> left -> val == y){
                        parent2 = front;
                    }

                    q.push(front -> left);
                }


                if(front -> right){
                    if(front -> right -> val == x){
                        parent1 = front;
                    }

                    if(front -> right -> val == y){
                        parent2 = front;
                    }
                    
                    q.push(front -> right);
                }

                if(parent1 && parent2){
                    if(parent1 != parent2) return true;
                }
            }

            parent1 = NULL;
            parent2 = NULL;
        }


        return false;
    }
};

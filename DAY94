# QUESTION 140:-  Path Sum III
# DESCRIPTION:- Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.
The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

# EXAMPLE1:
  Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
  Output: 3
  Explanation: The paths that sum to 8 are shown.

# Example2:
  Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
  Output: 3
 
# SOLUTION 140:- 
class Solution {
public:
    long long count = 0;

    void solve(TreeNode* root, long long targetSum) {
        if (root == nullptr) return;
        if (root->val == targetSum) {
            count++;
        }
        solve(root->left, targetSum - root->val);
        solve(root->right, targetSum - root->val);
    }

    int pathSum(TreeNode* root, int targetSum) {
        if (root) {
            solve(root, static_cast<long long>(targetSum));
            pathSum(root->left, targetSum);
            pathSum(root->right, targetSum);
        }
        return static_cast<int>(count); // Ensure that you return an int
    }
};

# QUESTION 130:- Validate Binary Search Tree
# DESCRIPTION:- Given the root of a binary tree, determine if it is a valid binary search tree (BST).
A valid BST is defined as follows:
The left Subtree  of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 
# EXAMPLE1:
  Input: root = [2,1,3]
  Output: true

# Example2:
  Input: root = [5,1,4,null,null,3,6]
  Output: false
  Explanation: The root node's value is 5 but its right child's value is 4.
     
# SOLUTION 130:- 
class Solution {
public:

bool isBst(TreeNode* root , long long mini, long long  maxi){
    if(root == NULL) return true;

    if(root -> val > mini && root -> val < maxi){
        bool left = isBst(root -> left, mini, root -> val);
        bool right = isBst(root -> right, root -> val, maxi);
        return left && right;
    }
    else{
        return false;
    }
}
    bool isValidBST(TreeNode* root) {
        return isBst(root, LLONG_MIN, LLONG_MAX);
    }
};

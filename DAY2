# QUESTION3:- Longest Common Prefix
# DESCRIPTION:-Write a function to find the longest common prefix string amongst an array of strings.If there is no common prefix, return an empty string "".
# EXAMPLE1:-
  Input: strs = ["flower","flow","flight"]
  Output: "fl"

# EXAMPLE2:-
 Input: strs = ["dog","racecar","car"]
 Output: ""
 Explanation: There is no common prefix among the input strings.



# SOLUTION3:- 
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {

        if(strs.size() == 0){
            return "";
        }
        int n = strs.size();
        string str = strs[0];

        for(int i = 1 ; i < n ; i++){
            int j = 0 ;
            while(j < str.length() && j < strs[i].length() && str[j] == strs[i][j]){
                j++ ;
            }

            str = str.substr(0,j);
        }

        return str;
    }
};










# QUESTION4:- Valid Palindrome
# DESCRIPTION:- Given a string s, return true if the s can be palindrome after deleting at most one character from it.
# EXAMPLE1:- 
  Input: s = "aba"
  Output: true

# EXAMPLE2:- 
  Input: s = "abca"
  Output: true
  Explanation: You could delete the character 'c'.



#SOLUTION4:- 
class Solution {
public:
bool isPalindrome(string s, int start, int end){
    while(start < end){
        if(s[start] != s[end]){
            return false;
        }
        start++;
        end--;
    }
    return true;
}
    bool validPalindrome(string s) {
        int start = 0 ;
        int end = s.size()-1;

        while(start<end){
            if(s[start] != s[end]){
                if(isPalindrome(s,start+1,end)){
                    return true;
                }
                if(isPalindrome(s,start,end-1)){
                    return true;
                }

                return false;
            }
            start++;
            end--;
        }

        return true;
    }
};










# QUESTION 5:- Find All Lonely Numbers in the Array
# DESCRIPTION:- You are given an integer array nums. A number x is lonely when it appears only once, and no adjacent numbers (i.e. x + 1 and x - 1) appear in the array.
Return all lonely numbers in nums. You may return the answer in any order.
# EXAMPLE1:- 
  Input: nums = [10,6,5,8]
  Output: [10,8]
  Explanation: 
  - 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums.
  - 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums.
  - 5 is not a lonely number since 6 appears in nums and vice versa.
  Hence, the lonely numbers in nums are [10, 8].
  Note that [8, 10] may also be returned.

# EXAMPLE2:- 
  Input: nums = [1,3,5,3]
  Output: [1,5]
  Explanation: 
  - 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums.
  - 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums.
  - 3 is not a lonely number since it appears twice.
  Hence, the lonely numbers in nums are [1, 5].
  Note that [5, 1] may also be returned.



#SOLUTION 5:- 
class Solution {
public:
    vector<int> findLonely(vector<int>& nums) {
        int n = nums.size() ;
        unordered_map<int,int> count;
        vector<int> ans ;
        for(int i = 0 ; i < n ; i++){
            count[nums[i]]++;
        }
        for(int i = 0; i < n ; i++){
            if(count.find(nums[i]-1) == count.end() && count.find(nums[i]+1) ==      count.end() && count[nums[i]] == 1){
                  ans.push_back(nums[i]);
            }
            else {
               continue ; 
                
            }
        }

        return ans;
    }
};

# QUESTION 127:- Binary Tree Maximum Path Sum
# DESCRIPTION:- A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.
The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any non-empty path.

# EXAMPLE1:
  Input: root = [1,2,3]
  Output: 6
  Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.
    
# Example2:
  Input: root = [-10,9,20,null,null,15,7]
  Output: 42
  Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.
   
# SOLUTION 127:- 
class Solution {
public:
int solve(TreeNode* root, int& maxi){

    if(root == NULL) return 0;

    int left = solve(root -> left , maxi);
    int right = solve(root -> right , maxi);

    int temp = max(max(left, right) + root -> val , root -> val );
    int ans = max(temp, left + right + root -> val);
    maxi = max(maxi,ans);
    
    return temp;
}
    int maxPathSum(TreeNode* root) {
        int maxi = INT_MIN;
        solve(root, maxi);

        return maxi; 
    }
};

# QUESTION 102:- Reorder List
# DESCRIPTION:- You are given the head of a singly linked-list. The list can be represented as:
L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:
L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.
# EXAMPLE1:
  Input: head = [1,2,3,4]
  Output: [1,4,2,3]

# Example 2:
  Input: head = [1,2,3,4,5]
  Output: [1,5,2,4,3]

# SOLUTION 102:- 
class Solution {
public:
int getLength(ListNode* head){
    ListNode* current = head;
    int count = 0 ;
    while(current != NULL){
        count++;
        current = current -> next;
    }
    return count;

}
    void reorderList(ListNode* head) {
        stack<ListNode*>st;
        ListNode* current = head;
        while(current != NULL){
            st.push(current);
            current = current -> next;
        }


        int length = getLength(head);
        current = head;
        // cout << current -> val;
        int condition = length/2;
        while(condition > 0){
            ListNode* forward = current -> next;
            ListNode* top = st.top();
            st.pop();
            current -> next = top;
            top -> next = forward;
            current = forward;
            condition--;
        }
        
        current -> next = NULL;
        
    }

};

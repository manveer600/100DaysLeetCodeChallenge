# QUESTION 123:- Lowest Common Ancestor of a Binary Tree
# DESCRIPTION:- Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
# EXAMPLE1:
  Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
  Output: 3
  Explanation: The LCA of nodes 5 and 1 is 3.

# Example2:
  Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
  Output: 5
  Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

# SOLUTION 123:- 
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        // DEKHO AGR LEFT M HOGI DONO NODES TOH COMMON SENSE KI BAAT 
        // JO NODE PEHLE AAYEGI VOHI ANS HOGI Y FIR JO P HOGA PEHLE 
        // VOHI ANS HOGA
        // AND
        // AGR RIGHT M HOGI DONO NODES TOH COMMON SENSE KI BAAT 
        // JO NODE PEHLE AAYEGI VOHI ANS HOGI Y FIR JO P HOGA PEHLE 
        // VOHI ANS HOGA
        // if(root != NULL) cout << root-> val << " ";
        if(root == NULL) return NULL;
        if(root == p || root == q){
            return root;
        }
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        TreeNode* right = lowestCommonAncestor(root->right, p, q);

        if(left != NULL && right != NULL) return root;


        return left == NULL ? right : left;
    }
};

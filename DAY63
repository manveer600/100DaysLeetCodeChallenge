# QUESTION 98:- Longest Substring with At Least K Repeating Characters
# DESCRIPTION:- Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.
if no such substring exists, return 0.
# EXAMPLE1:
  Input: s = "aaabb", k = 3
  Output: 3
  Explanation: The longest substring is "aaa", as 'a' is repeated 3 times.

# Example 2:
  Input: s = "ababbc", k = 2
  Output: 5
  Explanation: The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.

# SOLUTION 98:- 
class Solution {
public:
    int longestSubstring(string s, int k) {
        unordered_map<char,int>map;
        for(int i = 0; i < s.size(); i++){
            map[s[i]]++;
        }

        int index = 0;
        while(index < s.size() && map[s[index]] >= k){
            index++;
        }
        if(index == s.size()){
            return index;
        }
        int left = longestSubstring(s.substr(0,index),k);
        int right = longestSubstring(s.substr(index+1,s.size()-1), k);

        return max(left,right);

    }
};

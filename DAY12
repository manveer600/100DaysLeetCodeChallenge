# QUESTION 18:-  Search in Rotated Sorted Array
# DESCRIPTION:- There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

*** You must write an algorithm with O(log n) runtime complexity.

# EXAMPLE1:-
  Input: nums = [4,5,6,7,0,1,2], target = 0
  Output: 4

# EXAMPLE2:-
  Input: nums = [4,5,6,7,0,1,2], target = 3
  Output: -1


# SOLUTION 18:- 
class Solution {
public:

int solve(vector<int>& nums, int target){
    int n = nums.size();
    int left = 0 ;
    int right = n-1;

    while(left <= right){
    int mid = left + (right-left)/2;
        if(nums[mid] == target){
            return mid;
        }

        if(nums[left] <= nums[mid]){ //sorted
            if(nums[mid] > target && target >= nums[left]){
                right = mid-1;
            }
            else{
                left = mid+1;
            }
        }
        else{
            if(target > nums[mid] && target <= nums[right]){
                left = mid+1;
            }
            else{
                right = mid-1;
            }
        }
    }
    
     return -1;
}
    int search(vector<int>& nums, int target) {

        return solve(nums,target);
    }
};













# QUESTION 19:-  Integer to English Words
# DESCRIPTION:- Convert a non-negative integer num to its English words representation.
# EXAMPLE1:-
  Input: num = 123
  Output: "One Hundred Twenty Three"

# EXAMPLE2:-
  Input: num = 12345
  Output: "Twelve Thousand Three Hundred Forty Five"

# SOLUTION 19:- 
class Solution {
public:

class Solution {
public:
vector<string>array1 = {"","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"};

        vector<string>array2 = {"","","Twenty","Thirty","Forty","Fifty","Sixty","Seventy","Eighty","Ninety"};

string solve(int num){
    string result = "";
    if(num >= 100){
             int firstDigit = num/100;
             result = result + array1[firstDigit] + " Hundred ";
             num = num%100;
        }

        if(num >= 20){
            int firstDigit = num/10;
            result = result + array2[firstDigit] + " " ;
            num = num%10;
        }

        if(num > 0){
            result = result+array1[num] + " ";
        }


        return result;
}
    string numberToWords(int num) {
        string result = "";
        if(num == 0){
            return "Zero";
        }

        if(num >= 1000000000){
            int firstDigit = num/1000000000;
            result += solve(firstDigit) + "Billion ";
            num = num%1000000000;
        }

        if(num >= 1000000){
            int firstDigit = num/1000000;
            result += solve(firstDigit) + "Million ";
            num = num%1000000;
        }

        if(num >= 1000){
            int firstDigit = num/1000;
            result += solve(firstDigit) + "Thousand ";
            num = num%1000;
        }


        result += solve(num);
        result.pop_back();
        return result;

    }
};

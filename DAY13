# QUESTION 20:-   Find the Duplicate Number
# DESCRIPTION:- Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

# EXAMPLE1:-
  Input: nums = [1,3,4,2,2]
  Output: 2

# EXAMPLE2:-
  Input: nums = [3,1,3,4,2]
  Output: 3

# SOLUTION 20:- 
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0] ;
        int fast = nums[nums[0]] ;
        do{
            slow = nums[slow] ;
            fast = nums[nums[fast]] ;
        }while(fast != slow);
     
        fast = 0;
		while (fast != slow)
		{
			fast = nums[fast];
			slow = nums[slow];
		}

    return fast;
    }
};





# QUESTION 21:- Sort Colors
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

# EXAMPLE1:-
  Input: nums = [2,0,2,1,1,0]
  Output: [0,0,1,1,2,2]

# EXAMPLE2:-
  Input: nums = [2,0,1]
  Output: [0,1,2]

# SOLUTION 21:- 
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size() ;
        int p0 = 0 ;
        int p2 = n-1;
        int current = 0 ;

        while(current <= p2){
            if(nums[current] == 0){
                swap(nums[current],nums[p0]);
                p0++;
                current++;
            }
            else if(nums[current]==2){
                swap(nums[p2],nums[current]);
                p2--;
            }
            else{
                current++;
            }
        }

    }
};

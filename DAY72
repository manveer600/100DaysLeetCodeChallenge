# QUESTION 109:- Inorder Successor in BST
# DESCRIPTION:- Given a BST, and a reference to a Node x in the BST. Find the Inorder Successor of the given node in the BST.
# EXAMPLE1:
  Input:
      2
    /   \
   1     3
  K(data of x) = 2
  Output: 3 
Explanation: 
Inorder traversal : 1 2 3 
Hence, inorder successor of 2 is 3.

# Example 2:
  Input:
             20
            /   \
           8     22
          / \
         4   12
            /  \
           10   14
  K(data of x) = 8
  Output: 10
  Explanation:
  Inorder traversal: 4 8 10 12 14 20 22
  Hence, successor of 8 is 10.

# SOLUTION 109:- 
class Solution{
  public:
    void inorderTraversal(Node* root, queue<Node*>& q){
     if(root == NULL){
         return ;
     }
     
     inorderTraversal(root->left,q);
     q.push(root);
     inorderTraversal(root -> right,q);
     
 }
    // returns the inorder successor of the Node x in BST (rooted at 'root')
    Node * inOrderSuccessor(Node *root, Node *x)
    {
        queue<Node*> q;
        inorderTraversal(root,q);
        
        while(!q.empty()){
            Node* current = q.front();
            q.pop();
            if(current == x && !q.empty()){
                return q.front();
            }
        }
        return NULL;
    }
};


# QUESTION 110:-  Binary Tree Zigzag Level Order Traversal
# DESCRIPTION:- Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).
# EXAMPLE1:
  Input: root = [3,9,20,null,null,15,7]
  Output: [[3],[20,9],[15,7]]

# Example 2:
  Input: root = [1]
  Output: [[1]]

# SOLUTION 110:- 
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
       queue<TreeNode*> q;
       q.push(root);
       int leftToRight = true;
        vector<vector<int> >mainAns;
        if(root == NULL){
            return mainAns;
        }
       while(!q.empty()){
           int s = q.size();
           vector<int> ans(s);
           for(int i = 0; i < s; i++){
               TreeNode* front = q.front();
               q.pop();


                if(leftToRight == false){
                    int index = s-i-1;
                    ans[index] = front->val;
                }
                else{
                    int index = i;
                    ans[index] = front->val; 
                }
                

               if(front -> left) q.push(front -> left);
               if(front -> right) q.push(front -> right);
           }
            leftToRight = !leftToRight;
            mainAns.push_back(ans);
       }
       return mainAns;
    }
};


# QUESTION 111:- Binary Tree Level Order Traversal II
# DESCRIPTION:- Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).
# EXAMPLE1:
  Input: root = [3,9,20,null,null,15,7]
  Output: [[15,7],[9,20],[3]]

# Example 2:
  Input: root = [1]
  Output: [[1]]

# SOLUTION 111:- 
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        queue<TreeNode*> q;
       q.push(root);
        vector<vector<int> >mainAns;
        if(root == NULL){
            return mainAns;
        }
       while(!q.empty()){
           int s = q.size();
           vector<int> ans;
           for(int i = 0; i < s; i++){
               TreeNode* front = q.front();
               ans.push_back(front->val);
               q.pop();
               if(front -> left) q.push(front -> left);
               if(front -> right) q.push(front -> right);
           }
            mainAns.push_back(ans);
       }
        reverse(mainAns.begin(), mainAns.end());
        return mainAns;
    }
};


# QUESTION 112:- Populating Next Right Pointers in Each Node 
# DESCRIPTION:- You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

# EXAMPLE1:
  Input: root = [1,2,3,4,5,6,7]
  Output: [1,#,2,3,#,4,5,6,7,#]
  Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.

# Example 2:
  Input: root = []
  Output: []

# SOLUTION 112:- 

class Solution {
public:
    Node* connect(Node* root) {
        if (root == NULL) {
            return NULL;
        }
        Node* mainAns = root;
        while (root->left) {
            Node* current = root;
            while (current) {
                current->left->next = current->right;
                if (current->next) {
                    current->right->next = current->next->left;
                }
                current = current->next;
            }
            root = root->left;
        }
        return mainAns;
    }
};

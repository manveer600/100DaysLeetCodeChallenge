# QUESTION 103:- Partition List
# DESCRIPTION:- Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.
# EXAMPLE1:
  Input: head = [1,4,3,2,5,2], x = 3
  Output: [1,2,2,4,3,5]

# Example 2:
  Input: head = [2,1], x = 2
  Output: [1,2]

# SOLUTION 103:- 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if(head == NULL){
            return NULL;
        }
        if(head -> next == NULL){
            return head;
        }
        ListNode* dummy1 = new ListNode();
        ListNode* temp1 = dummy1;
        ListNode* dummy2 = new ListNode();
        ListNode* temp2 = dummy2;
        ListNode* current = head;
        while(current != NULL){
            if(current -> val < x){
                dummy1 -> next = current;
                dummy1 = dummy1 -> next;
                current = current -> next;
            }
            else if(current -> val >= x){
                dummy2 -> next = current;
                dummy2 = dummy2 -> next;
                current = current -> next;
            }
        }
        if(temp1 -> next == NULL){
            return temp2 -> next;
        }
        if(temp2 -> next == NULL){
            return temp1 -> next;
        }
        ListNode* ans = temp1 -> next;
        dummy2 -> next = NULL;
        dummy1 -> next = temp2 -> next;
        return ans;
    }
};

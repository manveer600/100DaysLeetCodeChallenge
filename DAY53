# QUESTION 86:- Reverse Nodes in k-Group
# DESCRIPTION:- Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

# EXAMPLE1:-
  Input: head = [1,2,3,4,5], k = 2
  Output: [2,1,4,3,5]

# Example 2:
  Input: head = [1,2,3,4,5], k = 3
  Output: [3,2,1,4,5]

# SOLUTION 86:- 
class Solution {
public:
ListNode* solve(ListNode* head, int& k, int length){

    if(head == NULL){
        return head;
    }

    if(length < k){
        return head;
    }

    ListNode* current = head;
    ListNode* prev = NULL;
    ListNode* forward = NULL;
    int count = 0;

    while( current != NULL && count < k){
        forward = current -> next;
        current -> next = prev;
        prev = current;
        current = forward;
        count++;
    }

    head->next = solve(current , k, length-k);
    return prev;
}
int getLength(ListNode* head){
    ListNode* current = head;
    int count = 0;
    while(current != NULL){
        count++;
        current = current -> next;
    }
    
    return count;
}
    ListNode* reverseKGroup(ListNode* head, int k) {
        int length = getLength(head);
        return solve(head, k, length);
    }
};

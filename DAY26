# QUESTION 41:-  Implement Queue using Stacks
# DESCRIPTION:- Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).

Implement the MyQueue class:

void push(int x) Pushes element x to the back of the queue.
int pop() Removes the element from the front of the queue and returns it.
int peek() Returns the element at the front of the queue.
boolean empty() Returns true if the queue is empty, false otherwise.
Notes:

You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.

# EXAMPLE1:-
  Input
  ["MyQueue", "push", "push", "peek", "pop", "empty"]
  [[], [1], [2], [], [], []]
  Output
  [null, null, null, 1, 1, false]
  
  Explanation
  MyQueue myQueue = new MyQueue();
  myQueue.push(1); // queue is: [1]
  myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
  myQueue.peek(); // return 1
  myQueue.pop(); // return 1, queue is [2]
  myQueue.empty(); // return false

# SOLUTION 41:- 
class MyQueue {
public:
    stack<int> inputstack;
    stack<int> outputstack;
    MyQueue() {
            
    }
    
    void push(int x) {
       inputstack.push(x); 
    }
    
    int pop() {
        if(outputstack.size()!=0) {
            int top = outputstack.top();
            outputstack.pop();
            return top;
            }
        else{
            while(inputstack.size()!=0){
            int top = inputstack.top();
            inputstack.pop();
            outputstack.push(top);
            }
            return pop();
        }
        
        
    }
    
    int peek() {
        if(outputstack.size()!=0) return outputstack.top();
          
        else{
            while(inputstack.size()!=0){
            int top = inputstack.top();
            inputstack.pop();
            outputstack.push(top);
            }
            return peek();
        }
        
    }
    
    bool empty() {
        if(inputstack.size()==0 && outputstack.size()==0) return true;
        else return false;
        
    }
};




# QUESTION 42:- Backspace String Compare
# DESCRIPTION:- Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.
Note that after backspacing an empty text, the text will continue empty.

# EXAMPLE1:-
  Input: s = "ab#c", t = "ad#c"
  Output: true
  Explanation: Both s and t become "ac".

# EXAMPLE2:-
  Input: s = "ab##", t = "c#d#"
  Output: true
  Explanation: Both s and t become "".

# SOLUTION 42:- 
class Solution {
public:
string solve(string& s){
stack<char>stack;
         int i = 0;
         while(i < s.size()){
            if(s[i] == '#'){
                if(!stack.empty()){
                    stack.pop();
                    i++;
                }
                else
                {
                    i++;
                }
            }
            else{
                stack.push(s[i]);
                i++;
            }
         }string s1="";
         while(!stack.empty()){
             cout << stack.top() ;
             s1.push_back(stack.top());
             stack.pop();
         }
return s1;
} 
    bool backspaceCompare(string s, string t) {
         return solve(s) == solve(t);
    }
};


# QUESTION 43:- Daily Temperatures
# DESCRIPTION:- Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

# EXAMPLE1:-
  Input: temperatures = [73,74,75,71,69,72,76,73]
  Output: [1,1,4,2,1,1,0,0]

# EXAMPLE2:-
  Input: temperatures = [30,40,50,60]
  Output: [1,1,1,0]

# SOLUTION 43:- 
class Solution {
public:
    vector<int> dailyTemperatures(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n,0);
        stack<int>stack;

        for(int i = 0; i < n; i++){
            
            while(!stack.empty() && nums[i] > nums[stack.top()]){
                int prevIndex = i - stack.top();
                ans[stack.top()] = prevIndex;
                stack.pop();
            }
            stack.push(i);
        }
        return ans;
    }
};

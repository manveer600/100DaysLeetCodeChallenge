# QUESTION 50:- Online Stock Span
# DESCRIPTION:- Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.
The span of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.
For example, if the prices of the stock in the last four days is [7,2,1,2] and the price of the stock today is 2, then the span of today is 4 because starting from today, the price of the stock was less than or equal 2 for 4 consecutive days.
Also, if the prices of the stock in the last four days is [7,34,1,2] and the price of the stock today is 8, then the span of today is 3 because starting from today, the price of the stock was less than or equal 8 for 3 consecutive days.
Implement the StockSpanner class:
StockSpanner() Initializes the object of the class.
int next(int price) Returns the span of the stock's price given that today's price is price.
 
# EXAMPLE1:-
  Input
  ["StockSpanner", "next", "next", "next", "next", "next", "next", "next"]
  [[], [100], [80], [60], [70], [60], [75], [85]]
  Output
  [null, 1, 1, 1, 2, 1, 4, 6]
  
  Explanation
  StockSpanner stockSpanner = new StockSpanner();
  stockSpanner.next(100); // return 1
  stockSpanner.next(80);  // return 1
  stockSpanner.next(60);  // return 1
  stockSpanner.next(70);  // return 2
  stockSpanner.next(60);  // return 1
  stockSpanner.next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.
  stockSpanner.next(85);  // return 6

# SOLUTION 50:- 
class StockSpanner {
public:
stack<pair<int,int> > stack;
    StockSpanner() {
        
    }
    
    int next(int price) {
        int span = 1;

        while(!stack.empty() && price >= stack.top().first){
            int previousSpan = stack.top().second;
            stack.pop();
            span += previousSpan;
        }


        stack.push(make_pair(price,span));
        return span;
    }
};



# QUESTION 51:- Product of the Last K Numbers
# DESCRIPTION:-Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream.
Implement the ProductOfNumbers class:
ProductOfNumbers() Initializes the object with an empty stream.
void add(int num) Appends the integer num to the stream.
int getProduct(int k) Returns the product of the last k numbers in the current list. You can assume that always the current list has at least k numbers.
The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.
 
# EXAMPLE1:-
  Input
  ["ProductOfNumbers","add","add","add","add","add","getProduct","getProduct","getProduct","add","getProduct"]
  [[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]
  
  Output
  [null,null,null,null,null,null,20,40,0,null,32]
  
  Explanation
  ProductOfNumbers productOfNumbers = new ProductOfNumbers();
  productOfNumbers.add(3);        // [3]
  productOfNumbers.add(0);        // [3,0]
  productOfNumbers.add(2);        // [3,0,2]
  productOfNumbers.add(5);        // [3,0,2,5]
  productOfNumbers.add(4);        // [3,0,2,5,4]
  productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20
  productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40
  productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0
  productOfNumbers.add(8);        // [3,0,2,5,4,8]
  productOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 

# SOLUTION 51:- 
class ProductOfNumbers {
public:
vector<int> ans;
    ProductOfNumbers() {
        
    }
    
    void add(int num) {
        ans.push_back(num);
    }
    
    int getProduct(int k) {
        int product = 1 ;
        int index = ans.size()-1;
        while(k > 0){
            product *= ans[index];
            k--;
            index--;
        }
        return product;
    }
};

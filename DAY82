# QUESTION 125:-  Construct Binary Tree from Preorder and Inorder Traversal
# DESCRIPTION:- Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.
# EXAMPLE1:
  Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
  Output: [3,9,20,null,null,15,7]

# Example2:
  Input: preorder = [-1], inorder = [-1]
  Output: [-1]
    
# SOLUTION 125:- 
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if (preorder.empty() || inorder.empty()) {
            return NULL;
        }

        int rootValue = preorder[0];
        TreeNode* root = new TreeNode(rootValue);

        int index = 0;
        while (inorder[index] != rootValue) {
            index++;
        }

    vector<int> leftPreorder(preorder.begin() + 1, preorder.begin() + 1 + index);
    vector<int> leftInorder(inorder.begin(), inorder.begin() + index);
        
        for(int i = 0; i < leftPreorder.size(); i++){
            cout << leftPreorder[i] << " ";
        }
        root->left = buildTree(leftPreorder, leftInorder);

    vector<int> rightPreorder(preorder.begin() + 1 + index, preorder.end());
    vector<int> rightInorder(inorder.begin() + index + 1, inorder.end());
        
        root->right = buildTree(rightPreorder, rightInorder);

        return root;
    }
};

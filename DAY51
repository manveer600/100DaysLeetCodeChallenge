# QUESTION 83:- Longest Substring Without Repeating Characters
# DESCRIPTION:- Given a string s, find the length of the longest 
substring without repeating characters.

# EXAMPLE1:-
  Input: s = "abcabcbb"
  Output: 3
  Explanation: The answer is "abc", with the length of 3.

# Example 2:
  Input: s = "bbbbb"
  Output: 1
  Explanation: The answer is "b", with the length of 1.

# SOLUTION 83:- 
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.size() == 0){
            return 0;
        }
        deque<char> dq;
        unordered_map<char,int>count;
        int i = 0;
        int maxi = INT_MIN;
        while(i < s.size()){
            if(count[s[i]] == 0){
                dq.push_back(s[i]);
                count[s[i]]++;
                i++;
                maxi = max(maxi,int(dq.size()));
            }
            else{
                count[dq.front()]--;
                dq.pop_front();
            }
        }

        return maxi;
    }
};


# QUESTION 84:- Median of Two Sorted Arrays
# DESCRIPTION:- Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

# EXAMPLE1:-
  Input: nums1 = [1,3], nums2 = [2]
  Output: 2.00000
  Explanation: merged array = [1,2,3] and median is 2.

# Example 2:
  Input: nums1 = [1,2], nums2 = [3,4]
  Output: 2.50000
  Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

# SOLUTION 84:- 
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int i = 0 ;
        int j = 0 ;
        vector<int>v;
        cout << floor(12/5);
        while(i < nums1.size() && j < nums2.size()){
            if(nums1[i] < nums2[j]){
                v.push_back(nums1[i]);
                i++;
            }else{
                v.push_back(nums2[j]);
                j++;
            }
        }

        while(i < nums1.size()){
            v.push_back(nums1[i]);
            i++;
        }

        while(j < nums2.size()){
            v.push_back(nums2[j]);
            j++;
        }

        int size = v.size();
        if(size %2 == 0){
            return (double) ((double) (v[size/2]) + (double)(v[size/2-1])) / 2.0;
        } else{
            int middle = size/2;
            double ans = v[middle];
            return ans;

        }

    }
};

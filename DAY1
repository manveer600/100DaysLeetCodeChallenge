# QUESTION1:- Find the Index of the First Occurrence in a String
# DESCRIPTION:- Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
# EXAMPLE1:-
  Input: haystack = "sadbutsad", needle = "sad"
  Output: 0
  Explanation: "sad" occurs at index 0 and 6.
  The first occurrence is at index 0, so we return 0.

# EXAMPLE2:-
  Input: haystack = "leetcode", needle = "leeto"
  Output: -1
  Explanation: "leeto" did not occur in "leetcode", so we return -1.



# SOLUTION1:- 
class Solution {
public:
    int strStr(string haystack, string needle) {
        if (needle.empty()) {
        return 0; 
    }

    int i = 0;
    int j = 0;

    while (i < haystack.size() && j < needle.size()) {
        if (haystack[i] == needle[j]) {
            i++;
            j++;
        } else {
            i = i - j + 1; 
            j = 0; 
        }
    }

    if (j == needle.size()) {
        return i - j; 
    }
    return -1;
    }
};















 
# QUESTION2:- Valid Parentheses
# DESCRIPTION:- Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

# EXAMPLE1:- 
Input: s = "()"
Output: true

# EXAMPLE2:- 
Input: s = "(]"
Output: false



#SOLUTION:- 
class Solution {
public:
bool matches(char ch1 , char ch2 ) { 
        if ( ch1 == ')' and ch2 == '(') return true ; 
          if ( ch1 == ']' and ch2 == '[') return true ; 
            if ( ch1 == '}' and ch2 == '{') return true ; 
            return false ; 
    }
    bool isValid(string s) {
        if(s.length() == 1 || s.length() == 0){
            return false;
        }
        stack<int> st ;
        for(int i = 0 ; i < s.size() ; i++){
            if(s[i] == '(' || s[i] == '{' || s[i] == '['){
                st.push(s[i]);
            }
            else{
                if(!st.empty()){
                    if(matches(s[i],st.top())){
                        st.pop();
                    }
                    else{
                        return false;
                    }
                }
                else{
                    return false;
                }
            }
        }
        if(st.empty()){
            return true;
        }
        else{
            return false;
        }
        return true;
    }
};

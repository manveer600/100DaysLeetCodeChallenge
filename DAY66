# QUESTION 101:- Add Two Numbers II
# DESCRIPTION:- You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.s in the mid of 0s and 2s.
# EXAMPLE1:
  Input: l1 = [7,2,4,3], l2 = [5,6,4]
  Output: [7,8,0,7]  

# Example 2:
  Input: l1 = [2,4,3], l2 = [5,6,4]
  Output: [8,0,7]

# SOLUTION 101:- 
 class Solution {
public:
    ListNode* reverse(ListNode* head) {
        ListNode* current = head;
        ListNode* prev = nullptr;
        while (current != nullptr) {
            ListNode* forward = current->next;
            current->next = prev;
            prev = current;
            current = forward;
        }
        return prev;
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);

        ListNode* current1 = l1;
        ListNode* current2 = l2;
        ListNode* ans = nullptr;
        ListNode* tail = nullptr;
        int carry = 0;

        while (current1 != nullptr || current2 != nullptr || carry != 0) {
            int sum = (current1 ? current1->val : 0) + (current2 ? current2->val : 0) + carry;
            carry = sum / 10;
            int digit = sum % 10;

            ListNode* newNode = new ListNode(digit);
            if (!ans) {
                ans = newNode;
                tail = newNode;
            } else {
                tail->next = newNode;
                tail = newNode;
            }

            if (current1) current1 = current1->next;
            if (current2) current2 = current2->next;
        }

        return reverse(ans);
    }
};

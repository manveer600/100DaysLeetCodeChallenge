# QUESTION 31:- Move Zeroes
# DESCRIPTION:- Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array. 
# EXAMPLE1:-
  Input: nums = [0,1,0,3,12]
  Output: [1,3,12,0,0]

# EXAMPLE2:-
  Input: nums = [0]
  Output: [0]

# SOLUTION 31:- 
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int index = 0 ;
        for(int i = 0 ; i < nums.size() ; i++){
            if(nums[i] != 0 ){
                nums[index] = nums[i] ;
                index++;
            }
        }

        while(index < nums.size()) {
            nums[index] = 0 ; 
            index++;
        }
    }
};



# QUESTION 32:- Best Time to Buy and Sell Stock
# DESCRIPTION:- You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
# EXAMPLE1:-
  Input: prices = [7,1,5,3,6,4]
  Output: 5
  Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
  Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

# EXAMPLE2:-
  Input: prices = [7,6,4,3,1]
  Output: 0
  Explanation: In this case, no transactions are done and the max profit = 0.

# SOLUTION 32:- 
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int buy = prices[0];
        int maxProfit = 0 ;
        int n = prices.size() ;
        
        for(int i = 0 ; i < n ; i++){
            if(prices[i] > buy){
                maxProfit = max(maxProfit,prices[i]-buy);
            }
            else{
                buy=prices[i];
            }
        }
        return maxProfit;
    }
};

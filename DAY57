# QUESTION 90:- Swap Nodes in Pairs
# DESCRIPTION:- Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)
# EXAMPLE1:-
  Input: head = [1,2,3,4]
  Output: [2,1,4,3]

# Example 2:
  Input: head = []
  Output: []

# SOLUTION 90:- 
class Solution {
public:
ListNode* solve(ListNode* head, int& k, int length){

    if(head == NULL){
        return head;
    }

    if(length < k){
        return head;
    }

    ListNode* current = head;
    ListNode* prev = NULL;
    ListNode* forward = NULL;
    int count = 0;

    while( current != NULL && count < k){
        forward = current -> next;
        current -> next = prev;
        prev = current;
        current = forward;
        count++;
    }

    head->next = solve(current , k, length-k);
    return prev;
}
int getLength(ListNode* head){
    ListNode* current = head;
    int count = 0;
    while(current != NULL){
        count++;
        current = current -> next;
    }
    
    return count;
}
    ListNode* reverseKGroup(ListNode* head, int k) {
        int length = getLength(head);
        return solve(head, k, length);
    }
    ListNode* swapPairs(ListNode* head) {
        return reverseKGroup(head , 2);
    }
};

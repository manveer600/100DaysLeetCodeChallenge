# QUESTION 141:-  Sum of Left Leaves
# DESCRIPTION:- Given the root of a binary tree, return the sum of all left leaves.
A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.

# EXAMPLE1:
  Input: root = [3,9,20,null,null,15,7]
  Output: 24
  Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.

# Example2:
  Input: root = [1]
  Output: 0
 
# SOLUTION 141:- 
class Solution {
public:
int count = 0;
void sum(TreeNode* root, string direction){

    if(root == NULL){
        return;
    }
    if(root -> left == NULL && root -> right == NULL && direction == "left"){
        count += root -> val;
        return;
    }else if(root -> left == NULL && root -> right == NULL){
        return ;
    }


    sum(root -> left, "left");
    sum(root-> right, "right");

}
    int sumOfLeftLeaves(TreeNode* root) {
        // if(root && !root -> left && !root -> right ){
        //     return 0;
        // }
        // string direction = "left";
        // sum(root, direction);
        // return count;


                // OR

        // SOLUTION 2
        int ans = 0;
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            int size = q.size();

            for(int i = 0; i < size; i++){
                TreeNode* front = q.front();
                if(front -> left && front -> left -> left == NULL && front -> left -> right == NULL){
                    ans += front ->left -> val;
                }
                q.pop();

                if(front -> left) q.push(front -> left);
                if(front -> right) q.push(front -> right);
            }
        }

        return ans;
    }
};

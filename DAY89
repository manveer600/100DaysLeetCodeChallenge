# QUESTION 133:- Convert Sorted List to Binary Search Tree
# DESCRIPTION:- Given the head of a singly linked list where elements are sorted in ascending order, convert it to a  height-balanced binary search tree.

# EXAMPLE1:
  Input: head = [-10,-3,0,5,9]
  Output: [0,-3,9,-10,null,5]
  Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.

# Example2:
  Input: head = []
  Output: []
     
# SOLUTION 133:- 
class Solution {
public:
    int getLength(ListNode* head) {
        int length = 0;
        ListNode* current = head;
        while (current) {
            length++;
            current = current->next;
        }
        return length;
    }

    TreeNode* sortedListToBST(ListNode* head) {
        if (head == NULL) {
            return NULL;
        }
        int length = getLength(head);

        // Find the middle of the linked list
        int mid = length / 2;
        ListNode* current = head;
        ListNode* previous = NULL;
        int count = 0;
        while (count < mid) {
            previous = current;
            current = current->next;
            count++;
        }

        // Create the root node
        TreeNode* root = new TreeNode(current->val);

        // If previous is not NULL, split the list into two parts
        if (previous) {
            previous->next = NULL;
            root->left = sortedListToBST(head);
        }

        root->right = sortedListToBST(current->next);
        return root;
    }
};


# QUESTION 134:- Construct Binary Tree from Inorder and Postorder Traversal
# DESCRIPTION:- Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.

# EXAMPLE1:
  Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
  Output: [3,9,20,null,null,15,7]

# Example2:
  Input: inorder = [-1], postorder = [-1]
  Output: [-1]

# SOLUTION 134:- 
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        
        if(inorder.size() == 0 || postorder.size() == 0) return NULL;
        int lastElement = postorder[postorder.size()-1];

        TreeNode* root = new TreeNode(lastElement);

        int index = 0;
        int i = 0;
        while(i < inorder.size()){
            if(inorder[i] == lastElement){
                index = i;
                break;
            }
            i++;
        }

        vector<int> leftInorder(inorder.begin(), inorder.begin()+index);
        vector<int> LeftPostorder(postorder.begin(), postorder.begin()+index);

        root -> left = buildTree(leftInorder, LeftPostorder);

        vector<int> rightInorder(inorder.begin()+index+1 , inorder.end());
        vector<int> rightPostorder(postorder.begin()+index , postorder.end()-1);

        root -> right = buildTree(rightInorder, rightPostorder);

        return root;
    }
};

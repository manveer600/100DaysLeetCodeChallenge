# QUESTION 42:-  Next Greater Element I
# DESCRIPTION:- The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.
You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.
For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.
Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.
 
# EXAMPLE1:-
  Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
  Output: [-1,3,-1]
  Explanation: The next greater element for each value of nums1 is as follows:
  - 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
  - 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
  - 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.

 # EXAMPLE2:-
  Input: nums1 = [2,4], nums2 = [1,2,3,4]
  Output: [3,-1]
  Explanation: The next greater element for each value of nums1 is as follows:
  - 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
  - 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.
   

# SOLUTION 42:- 
#include <bits/stdc++.h>
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        int size = nums2.size();
        vector<int> ans(nums2.size());
        ans[size-1] = -1;
        stack<int> stack;
        for(int i = size-1; i>=0 ;i--){
            while(!stack.empty() && nums2[i] > stack.top()){
                stack.pop();
            }
            if(stack.empty()){
                ans[i] = -1;
            }else{
               ans[i] = stack.top(); 
            }
            stack.push(nums2[i]);
        } 
        

        unordered_map<int,int> m;
        for(int i = 0 ; i < size; i++){
            m.insert({nums2[i],ans[i]});
        }


        vector<int>mainAns(nums1.size());
        for(int i = 0; i < nums1.size(); i++){
            cout << m[nums1[i]];
            mainAns.push_back(m[nums1[i]]);
        }

        return mainAns;
    }
};
